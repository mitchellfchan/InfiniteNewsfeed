package theInfinityScore;

import java.util.ArrayList;

import ddf.minim.*;
import ddf.minim.UGen.UGenInput;
import ddf.minim.ugens.*;

public class Violin implements Instrument {
	InfinityScore parent;
	Minim minim;
	
	String[] notes = {	
						"C3", "Cs3", "D3", "Ds3", "E3", "F3", "Fs3", "G3", "Gs3", "A3", "As3", "B3",
						"C4", "Cs4", "D4", "Ds4", "E4", "F4", "Fs4", "G4", "Gs4", "A4", "As4", "B4",
						"C5", "Cs5", "D5", "Ds5", "E5", "F5", "Fs5", "G5", "Gs5", "A5", "As5", "B5",
						"C6", "Cs6", "D6", "Ds6", "E6", "F6", "Fs6", "G6", "Gs6", "A6", "As6", "B6",
						"C7", "Cs7", "D7", "Ds7", "E7", "F7", "Fs7", "G7", "Gs7", "A7", "As7", "B7",};
	
	int hitOn = 2;
	ArrayList<Sampler> theSamples;
	ArrayList<Integer> melody;
	ArrayList<Sampler> olderNotes;
	ArrayList<Integer> oldNotes;
	int root = 0;	
	int currentNote = 0;

	

	
	public Violin(InfinityScore _parent) {
		parent = _parent;
		minim = parent.minim;
		theSamples = new ArrayList<Sampler>();	
		melody = new ArrayList<Integer>();
		olderNotes = new ArrayList<Sampler>();
		oldNotes = new ArrayList<Integer>();
	}
	
	public void setRoot(int val){
		root = val;
	}
	
	public void setMelody(int[] newMelody){
		melody.clear();
		for(int i = 0; i < newMelody.length; i++){
			melody.add(newMelody[i]);
		}
		if (parent.verbose) System.out.println ("Created a " + melody.size() + " note Melody");		
	}
	
	public void initSamplesScale(String newRoot, int[] scaleNotes){
		String path = (parent.sketchPath + "/samples/violin/");
		for(int i = 0; i < notes.length; i ++){
			if(newRoot == notes[i]){
				root = i;
			}
		}
		
		theSamples.clear();
		if (parent.verbose) {
			System.out.println("cleared theSamples. Array List contains: " + theSamples.size() + " entries");
		}

				
		for(int i = 0; i < scaleNotes.length; i++){
			System.out.println (root + notes[scaleNotes[i]]);
			Sampler sam = new Sampler(parent.sketchPath + "/samples/cello_1/cello_" + notes[root + scaleNotes[i]] + "_1_forte_arco-normal.wav", 4, minim);
			if(parent.verbose) System.out.println ("Made " + notes[root + scaleNotes[i]]);
			theSamples.add(sam);
		}
		
	}
	
	
	public void resetNext(){
		//later, do something creative here
		currentNote = 0;
	}
	
	public void noteOn(float dur){
		olderNotes.add(theSamples.get(melody.get(currentNote)));
		oldNotes.add(melody.get(currentNote));
		if (parent.verbose) System.out.println( oldNotes.size() + " notes in the buffer");
		theSamples.get(melody.get(currentNote)).patch(parent.out);
		theSamples.get(melody.get(currentNote)).trigger();
		if(parent.verbose){
			System.out.println("Playing Violin Note " + melody.get(currentNote));
		}
		currentNote++;
		if(currentNote >= melody.size()){
			resetNext();
		}
		
	}
	
	public void setNote(int note){
		currentNote = note;
		
	}
	
	
	public void noteOff(){
//		if(olderNotes.size()>1){
//		olderNotes.get(0).unpatch(parent.out);
//		olderNotes.remove(0);
//		}
		
		if(oldNotes.get(0) != melody.get(currentNote)){
			theSamples.get(oldNotes.get(0)).unpatch(parent.out);
		}
		//theSamples.get(melody.get(currentNote)).unpatch(parent.out);
	
	}

}
