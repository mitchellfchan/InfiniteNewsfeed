package theInfinityScore;


import java.util.ArrayList;

import ddf.minim.*;
import ddf.minim.ugens.*;



public class Cello implements Instrument{
	InfinityScore parent;
	Minim minim;
	String[] notes = {	"C2", "Cs2", "D2", "Ds2", "E2", "F2", "Fs2", "G2", "Gs2", "A2", "As2", "B2",
						"C3", "Cs3", "D3", "Ds3", "E3", "F3", "Fs3", "G3", "Gs3", "A3", "As3", "B3",
						"C4", "Cs4", "D4", "Ds4", "E4", "F4", "Fs4", "G4", "Gs4", "A4", "As4", "B4",
						"C5", "Cs5", "D5", "Ds5", "E5", "F5", "Fs5", "G5", "Gs5", "A5", "As5", "B5" };
	
	int hitOn = 4;				
	ArrayList<Sampler> theSamples;
	ArrayList<Integer> melody;

	int root = 0;	
	int currentNote;
	
	public Cello(InfinityScore _parent) {
		parent = _parent;
		minim = parent.minim;
		theSamples = new ArrayList<Sampler>();	
		melody = new ArrayList<Integer>();

	}
	
	public void setRoot(int val){
		root = val;
	}
	
	public void setMelody(int[] newMelody){
		melody.clear();
		for(int i = 0; i < newMelody.length; i++){
			melody.add(newMelody[i]);
		}
		if (parent.verbose) System.out.println ("Created a " + melody.size() + " note Bass Line");		
	}
	
	public void initSamplesScale(String newRoot, int[] scaleNotes){
	
	
		
		for(int i = 0; i < notes.length; i ++){
			if(newRoot == notes[i]){
				root = i;
			}
		}
		
		for(Sampler s : theSamples){
			s.unpatch(parent.out);
		}
		
		theSamples.clear();
		if (parent.verbose) {
			System.out.println("cleared theSamples. Array List contains: " + theSamples.size() + " entries");
		}

				
		for(int i = 0; i < scaleNotes.length; i++){
			System.out.println (root + notes[scaleNotes[i]]);
			Sampler sam = new Sampler(parent.sketchPath + "/samples/cello_1/cello_" + notes[root + scaleNotes[i]] + "_1_forte_arco-normal.wav", 2, minim);
			if(parent.verbose) System.out.println ("Made " + notes[root + scaleNotes[i]]);
			theSamples.add(sam);
		}
		
		for(Sampler s : theSamples){
			s.patch(parent.out);
		}
		
	}
	
	
	public void resetNext(){
		//later, do something creative here
		currentNote = 0;
	}
	
	public void noteOn(float dur){
	

		theSamples.get(melody.get(currentNote)).patch(parent.out);
		theSamples.get(melody.get(currentNote)).trigger();
		if(parent.verbose){
			System.out.println("Playing Cello Note " + melody.get(currentNote));
		}
		currentNote++;
		if(currentNote >= melody.size()){
			resetNext();
		}
		
	}
	
	public void setNote(int note){
		currentNote = note;
	}
	
	
	public void noteOff(){
	
	
	
	}
}