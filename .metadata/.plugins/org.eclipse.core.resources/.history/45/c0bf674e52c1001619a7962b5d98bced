package theInfinityScore;

import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Conductor {
	boolean verbose = false;

	String[] notes = { 
			"C2", "Cs2", "D2", "Ds2", "E2", "F2", "Fs2", "G2","Gs2", "A2", "As2", "B2", 
			"C3", "Cs3", "D3", "Ds3", "E3", "F3", "Fs3", "G3", "Gs3", "A3", "As3", "B3", 
			"C4", "Cs4", "D4", "Ds4","E4", "F4",  "Fs4", "G4", "Gs4", "A4", "As4", "B4", 
			"C5", "Cs5", "D5", "Ds5", "E5", "F5",  "Fs5", "G5", "Gs5", "A5", "As5", "B5",
			"C6", "Cs6", "D6", "Ds6", "E6", "F6", "Fs6", "G6", "Gs6", "A6","As6", "B6", 
			"C7", "Cs7", "D7", "Ds7", "E7", "F7", "Fs7", "G7","Gs7", "A7", "As7", "B7", };

	InfinityScore parent;
	Metronome m;
	AudioPlayer ap;

	int decision = 1;
	int dDie = 100;
	int dMelodyProb = 55;
	int dChordProb = 25;
	int dRestProb = 6;

	int[] majorScale = { 0, 2, 4, 5, 7, 9, 11 };
	int[] minorScale = { 0, 2, 3, 5, 7, 8, 10 };
	HashMap<Integer, int[]> relatedKeys;

	int[] coreMelody = { 0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1 };
	int[] coreBassLine = { 0, 5, 0, 3 };

	int key = 0;
	int rootBassInt = key;
	int melodyOctaveGap = 1;
	int melodyHarmony = 4;
	int rootMelodyInt = rootBassInt + 12 * melodyOctaveGap + majorScale[melodyHarmony-1];
	String rootBass = notes[rootBassInt];
	String rootMelody = notes[rootMelodyInt];

	Runnable newLyricsPlease;
	ExecutorService executor = Executors.newCachedThreadPool();

	public Conductor(InfinityScore _parent, Metronome _m) {
		parent = _parent;
		m = _m;
		newLyricsPlease = new Lyricist(parent);
		relatedKeys = new HashMap<Integer, int[]>();
		makeRelatedHMap();
		executor.submit(newLyricsPlease);

		// TODO Auto-generated constructor stub
	}

	public void run() {

		refreshLyrics();
		refreshBassLine();

		if (m.tock()) {
			if (m.beatCount % parent.violin.hitOn == 0) {
				parent.out.playNote(0, 4.0f, parent.violin);
			}
			if (m.beatCount % parent.cello.hitOn == 0) {
				parent.out.playNote(0, 4.0f, parent.cello);
			}
			if (m.beatCount % parent.singer.hitOn == 0) {
				parent.singer.singNext();
			}
		}
	}

	public void keyChange(){
		/*
		 * hmmmm... OK, I think you should be able to change an octave, or up a third, or a fourth, or, well... I guess anything is good
		 */
		int newKey = (int)parent.random(7);
		rootBassInt = newKey + 1;   //I don't like representing the root as 0, like in computer notation. Wanna start calling the root "1", the fifth "5", the octave "8", etcetera
		melodyOctaveGap += (int)parent.random(-1, 2);
		melodyHarmony = (int)parent.random(7);
		rootMelodyInt = rootBassInt +12*melodyOctaveGap + melodyHarmony ;
	}
	
	public void refreshLyrics() {
		if (parent.singer.repeatCount >= parent.singer.tolerableRepetition) {
			parent.singer.resetRepeatCount();
			executor.submit(newLyricsPlease);
		}
	}

	public void refreshMelody() {
		if (parent.violin.doneMelody) {

		}
	}

	public void refreshBassLine() {

		if (parent.cello.repeatCount >= parent.cello.tolerableRepetition) {
			parent.cello.resetRepeatCount();
			int toChange = (int) parent.random(coreBassLine.length);
			if (Die.getBool(0.75f)) {
				coreBassLine[toChange] = (int) parent.random(7);
			} else {
				coreBassLine[toChange] = 0;
			}
			parent.cello.setMelody(coreBassLine);
		}
	}

	public void makeRelatedHMap() {
		relatedKeys.put(1, minorScale);
		relatedKeys.put(2, minorScale);
		relatedKeys.put(3, minorScale);
		relatedKeys.put(4, majorScale);
		relatedKeys.put(5, majorScale);
		relatedKeys.put(6, minorScale);
		relatedKeys.put(7, minorScale);
	}

	// void decideWhatToDo(Die d, Metronome m) {
	// if (parent.millis() - m.lastEvent > m.tempo/m.noteValue) {
	// decision = d.pickWeightedValue(decision, dMelodyProb, dChordProb,
	// dRestProb);
	// }
	// if (decision == 0) melodyManager();
	// if (decision == 1) chordManager();
	// if (decision == 2) restManager();
	// }
	//
	//
	//
	// void restManager() {
	// if (millis() - lastEvent > tempo/restValue) {
	// if (beatCount%timeSignature == 0) restValue = pickDieValue(rDie,
	// restValue, r16Prob, r8Prob, r4Prob, r2Prob, r1Prob);
	// lastEvent = millis();
	// }
	// }
	//
	//
	//
	// float millis(){
	// return parent.millis();
	// }
	//
	// }
}
