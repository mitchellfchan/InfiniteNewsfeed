package theInfinityScore;


import java.util.ArrayList;

import ddf.minim.Minim;
import ddf.minim.ugens.Instrument;
import ddf.minim.ugens.Sampler;

public class Cello implements Instrument{
	InfinityScore parent;
	Minim minim;
	String[] notes = {	"C2", "Cs2", "D2", "Ds2", "E2", "F2", "Fs2", "G2", "Gs2", "A2", "As2", "B2",
						"C3", "Cs3", "D3", "Ds3", "E3", "F3", "Fs3", "G3", "Gs3", "A3", "As3", "B3",
						"C4", "Cs4", "D4", "Ds4", "E4", "F4", "Fs4", "G4", "Gs4", "A4", "As4", "B4",
						"C5", "Cs5", "D5", "Ds5", "E5", "F5", "Fs5", "G5", "Gs5", "A5", "As5", "B5" };
				
	ArrayList<Sampler> celloSamples;
	//Sampler[] celloSamples;
	Sampler testSample;
	
	int currentNote;
	
	public Cello(InfinityScore _parent) {
		parent = _parent;
		minim = parent.minim;
		celloSamples = new ArrayList<Sampler>();
		System.out.println(notes.length);
		System.out.println(celloSamples.size());
		
		String path = (parent.sketchPath + "/samples/cello_1/");
		
		for(int i = 0; i < notes.length; i++){
			System.out.println (notes[i]);
			Sampler cs = new Sampler(path + "cello_A2_1_forte_arco-normal.mp3", 4, minim);
			celloSamples.add(cs);
		}
			
	}
	
	public void noteOn(float dur){
		celloSamples.get(currentNote).patch(parent.out);
		celloSamples[currentNote].trigger();
		if(parent.verbose){
			System.out.println("Playing Note " + notes[currentNote]);
		}
		
	}
	
	public void setNote(int note){
		currentNote = note;
	}
	
	public void noteOn( float dur, int note )
	  {
		currentNote = note;
		celloSamples[note].patch(parent.out);
		celloSamples[note].trigger();
		if(parent.verbose){
			System.out.println("Playing Note " + notes[note] + " from custom noteOn method signature");
		}
	
	  }
	
	public void noteOff(){
		//celloSamples[currentNote].unpatch(parent.out);
		/*
		 * IDEA FOR UNPATCHING: could make an ArrayList of notes being activated, then always unpatch the lowest one on the list
		 */
		
	}

}
